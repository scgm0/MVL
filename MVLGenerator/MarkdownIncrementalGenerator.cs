using System;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace MVLGenerator;

[Generator]
public class MarkdownIncrementalGenerator : IIncrementalGenerator {
	static private readonly Regex UrlRegex = new("<(https?://[^>]+)>", RegexOptions.IgnoreCase | RegexOptions.Compiled);

	public void Initialize(IncrementalGeneratorInitializationContext context) {
		var authorsFiles = context.AdditionalTextsProvider
			.Where(static file => Path.GetFileName(file.Path)
				.EndsWith(".md", StringComparison.OrdinalIgnoreCase));

		var compilationAndAuthors = context.CompilationProvider.Combine(authorsFiles.Collect());

		context.RegisterSourceOutput(compilationAndAuthors,
			static (spc, source) => {
				foreach (var authorsFile in source.Right) {
					var content = authorsFile.GetText(spc.CancellationToken);
					if (content == null) continue;

					var parsedData = ParseMarkdown(content.ToString());
					var sourceCode = GenerateSourceCode(Path.GetFileNameWithoutExtension(authorsFile.Path), parsedData);
					spc.AddSource($"Info.{Path.GetFileNameWithoutExtension(authorsFile.Path)}.g.cs",
						SourceText.From(sourceCode, Encoding.UTF8));
				}
			});
	}

	static private ImmutableList<(string Section, string Content)> ParseMarkdown(string content) {
		var builder = ImmutableList.CreateBuilder<(string, string)>();
		var lines = content.Split(["\r\n", "\n"], StringSplitOptions.None);

		string? currentSection = null;
		var currentEntries = new StringBuilder();

		foreach (var line in lines) {
			if (line.StartsWith("## ")) {
				if (currentSection != null) {
					builder.Add((currentSection, currentEntries.ToString().Trim()));
					currentEntries.Clear();
				}

				currentSection = line.Substring(3).Trim();
			} else if (currentSection != null && line.StartsWith("    ")) {
				currentEntries.AppendLine(ConvertMarkdownUrls(line.TrimStart()));
			}
		}

		if (currentSection != null && currentEntries.Length > 0) {
			builder.Add((currentSection, currentEntries.ToString().Trim()));
		}

		return builder.ToImmutable();
	}

	static private string ConvertMarkdownUrls(string input) {
		if (string.IsNullOrEmpty(input))
			return input;

		return UrlRegex.Replace(input,
			match => {
				var url = match.Groups[1].Value;
				return $"[color=#3c7fe1][url]{url}[/url][/color]";
			});
	}

	static private string GenerateSourceCode(string name, ImmutableList<(string Section, string Content)> data) {
		var entries = new StringBuilder();
		foreach (var item in data) {
			var escapedValue = item.Content.Replace("\"", "\\\"").Replace("\n", "\\n");
			entries.AppendLine($"""        ("{item.Section}", "{escapedValue}"),""");
		}

		return $$"""
				 // <auto-generated/>
				 using System.Collections.Generic;

				 public static partial class Info
				 {
				     public static IReadOnlyList<(string, string)> {{name}} { get; } = [
				 {{entries.ToString().TrimEnd(',', '\r', '\n')}}
				     ];
				 }
				 """;
	}
}